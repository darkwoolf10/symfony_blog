# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    woolf.command.notification:
        class: WoolfBundle\Command\Notification
        arguments:
            - "@doctrine.orm.default_entity_manager"
        tags:
            - { name: console.command }

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    WoolfBundle\:
        resource: '../../src/WoolfBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/WoolfBundle/{Entity,Repository,Tests}'
    WoolfBundle\DataFixtures\ORM\LoadFixtures:
            tags: [doctrine.fixture.orm]

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    WoolfBundle\Controller\:
        resource: '../../src/WoolfBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    admin.category:
        class: WoolfBundle\Admin\CategoryAdmin
        arguments: [~, WoolfBundle\Entity\Category, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Category }
        public: true

    admin.blog:
        class: WoolfBundle\Admin\PostAdmin
        arguments: [~, WoolfBundle\Entity\Post, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Posts }
        public: true

    admin.subscribe:
            class: WoolfBundle\Admin\SubscribeAdmin
            arguments: [~, WoolfBundle\Entity\Subscribe, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Subscribe }
            public: true

    admin.user:
            class: WoolfBundle\Admin\UserAdmin
            arguments: [~, WoolfBundle\Entity\User, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Users }
            public: true

#    WoolfBundle\EventSubscriber\ExceptionSubscriber:
#        tags:
#            - { name: kernel.event_listener, event: kernel.exception }

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

